{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","serviceWorker.js","index.js"],"names":["Card","monster","className","src","id","alt","key","name","email","CardList","monsters","map","SearchBox","placeholder","search","type","onChange","App","target","setState","searchField","value","state","fetch","res","json","body","this","console","log","filterdedMonsters","filter","m","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","numbers","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uWAGaA,G,YAAO,SAAC,GAAa,IAAZC,EAAW,EAAXA,QACtB,OACA,yBAAKC,UAAU,kBACV,yBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,0BAA8DC,IAAI,YAC1E,wBAAIH,UAAU,iBAAiBI,IAAKL,EAAQG,IAAKH,EAAQM,MACzD,2BAAIN,EAAQO,UCLHC,EAAW,SAAC,GAAc,IAAbC,EAAY,EAAZA,SACvB,OACA,yBAAKR,UAAU,aAAf,SACAQ,EAASC,KAAI,SAACV,GACV,OAAO,kBAAC,EAAD,CAAMK,IAAKL,EAAQG,GAAIH,QAASA,SCHlCW,G,MAAY,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,YAAYC,EAAU,EAAVA,OACnC,OAAQ,2BAAOC,KAAK,SAASF,YAAaA,EAAcG,SAAUF,EAAQZ,UAAU,aCwCzEe,G,wDAvCb,aAAc,IAAD,8BACX,gBAgBFH,OAAS,YAAe,IAAbI,EAAY,EAAZA,OACT,EAAKC,SAAS,CAACC,YAAYF,EAAOG,SAhBlC,EAAKC,MAAQ,CACZZ,SAAS,GACTU,YAAY,IAJF,E,2MAUSG,MAAM,8C,cAAlBC,E,gBACaA,EAAIC,O,OAAjBC,E,OACNC,KAAKR,SAAS,CAACT,SAASgB,I,kDAExBE,QAAQC,IAAR,M,+IAOK,IACAnB,EAAYiB,KAAKL,MAAjBZ,SACYI,EAAUa,KAAKL,MAA3BF,YACDU,EAAoBpB,EAASqB,QAAO,SAAAC,GACxC,OAAOA,EAAEzB,KAAK0B,cAAcC,SAASpB,EAAOmB,kBAI9C,OACA,yBAAK/B,UAAU,OACb,+CACA,kBAAC,EAAD,CAAYY,OAAQa,KAAKb,OAAQD,YAAY,oBAC7C,kBAAC,EAAD,CAAUP,IAAI,IAAII,SAAUoB,S,GAlChBK,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKC,QAHI,CAAC,EAAE,EAAE,EAAE,MAKlBC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.0b2e653e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css'\r\n\r\nexport const Card = ({monster})=>{\r\nreturn (\r\n<div className='card-container'>\r\n     <img src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} alt='monster'/>\r\n     <h2 className='card-container' key={monster.id}>{monster.name}</h2>\r\n     <p>{monster.email}</p>\r\n</div>\r\n)\r\n}","import React from 'react';\r\nimport './card-list.css'\r\nimport {Card} from '../card/card.js'\r\nexport  const CardList = ({monsters})=>{\r\n    return(\r\n    <div className='card-list'>      {\r\n    monsters.map((monster)=>{\r\n        return <Card key={monster.id} monster={monster}></Card>\r\n    })\r\n    }\r\n    </div>)\r\n}","import React from 'react';\r\nimport './search-box.css'\r\n\r\n\r\nexport const SearchBox = ({placeholder,search})=>{\r\n    return (<input type='search' placeholder={placeholder}  onChange={search} className='search'/>)\r\n}","import React, {Component} from 'react';\nimport { CardList } from './components/card-list/card-list'\nimport {SearchBox} from './components/search-box/search-box'\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super ()\n    this.state = {\n     monsters:[],\n     searchField:''\n  }\n  }\n\n  async componentDidMount(){\n    try{\n      const res = await fetch('https://jsonplaceholder.typicode.com/users')\n      const body = await res.json()\n      this.setState({monsters:body})\n    }catch(e){\n      console.log(e)\n    }\n  }\n  search = ({target}) => {\n    this.setState({searchField:target.value})\n  }\n\n  render(){\n    const {monsters} = this.state\n    const {searchField:search} = this.state\n    const filterdedMonsters = monsters.filter(m=>{\n      return m.name.toLowerCase().includes(search.toLowerCase())\n    })\n\n\n    return (\n    <div className=\"App\">\n      <h1>Monsters Roldex</h1>\n      <SearchBox  search={this.search} placeholder='search monsters'></SearchBox>\n      <CardList key='1' monsters={filterdedMonsters}></CardList>\n  </div>\n  )\n}  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nconst nums = [1,2,3,4]\nReactDOM.render(\n  <React.StrictMode>\n    <App numbers={nums}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}